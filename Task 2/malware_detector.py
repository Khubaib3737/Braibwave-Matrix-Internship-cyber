import os
import hashlib

MAGIC_NUMBERS = {
    "MZ": "exe",
    "25504446": "pdf",
    "504B0304": "zip/docx",
    "FFD8FF": "jpg",
    "89504E47": "png",
    "7F454C46": "elf",
}

KNOWN_MALWARE_HASHES = {
    "44d88612fea8a8f36de82e1278abb02f",  # EICAR test file
}

def get_file_hash(file_path, algo="md5"):
    hash_func = getattr(hashlib, algo)()
    with open(file_path, 'rb') as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hash_func.update(chunk)
    return hash_func.hexdigest()

def get_hex_signature(file_path, byte_count=4):
    with open(file_path, 'rb') as f:
        signature = f.read(byte_count)
    return signature.hex().upper()

def detect_magic_number(hex_sig):
    for magic, ftype in MAGIC_NUMBERS.items():
        if hex_sig.startswith(magic):
            return ftype
    return "unknown"

def has_rtlo(filename):
    return '\u202e' in filename

def extension_matches(filename, detected_type):
    ext = os.path.splitext(filename)[1][1:].lower()
    if detected_type == "zip/docx" and ext in ["zip", "docx"]:
        return True
    return ext == detected_type

def analyze_file(file_path):
    print("\\nn================= 🦠 Malware Scan Report =================")
    print(f"📄 File: {file_path}")
    print("===========================================================")

    # Summary Info
    issues = []
    verdict = "✅ File appears clean"

    # Check RTLO
    if has_rtlo(file_path):
        issues.append("⚠️ RTLO character detected in file name (may spoof extension)")

    # Hex signature
    hex_sig = get_hex_signature(file_path)
    detected_type = detect_magic_number(hex_sig)
    print(f"🔍 Detected file type (by signature): {detected_type.upper()} ({hex_sig})")

    # Extension check
    if not extension_matches(file_path, detected_type):
        issues.append("⚠️ File extension does NOT match actual content type")
    else:
        print("✅ File extension matches detected content type")

    # Hash check
    file_hash = get_file_hash(file_path)
    print(f"🔑 MD5 Hash: {file_hash}")

    if file_hash in KNOWN_MALWARE_HASHES:
        issues.append("🚨 Hash matches known malware signature")

    # Issues summary
    if issues:
        print("\n⚠️ Detected Issues:")
        for issue in issues:
            print(f" - {issue}")
        if any("🚨" in issue for issue in issues):
            verdict = "🚨 Malware detected!"
        else:
            verdict = "⚠️ Suspicious file (potential risk)"
    else:
        print("\n✅ No issues detected")

    print("\n===========================================================")
    print(f"🏁 Final Verdict: {verdict}")
    print("===========================================================\n")

def main():
    print("== 🦠 Malware Detection Script ==")
    path = input("Enter file path to scan: ").strip()

    if not os.path.isfile(path):
        print("❌ File not found.")
        return

    analyze_file(path)

if __name__ == "__main__":
    main()
